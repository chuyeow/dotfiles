{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"if want, got": {
		"prefix": "ifwg",
		"body": [
			"if want, got := $1, $2; want != got {",
			"\tt.${3:Errorf}(\"${4:expected %v but got %v}\", want, got)",
			"}"
		]
	},

	"given, when, then": {
		"prefix": "given",
		"body": [
			"// Given",
			"$0",
			"// When",
			"",
			"// Then"
		]
	},

	"table tests": {
		"prefix": "tt",
		"body": [
			"// Given",
			"var testCases = []struct {",
			"\tname string",
			"\t${1:expected} ${2:type}",
			"}{",
			"\t{",
			"\t\tname: \"${3:scenarioName}\",",
			"\t\t$1: $2,",
			"\t},",
			"}",
			"",
			"for _, tc := range testCases {",
			"\tt.Run(tc.name, func(t *testing.T) {",
			"\t\t// When",
			"\t\t$0",
			"\t\t// Then",
			"\t})",
			"}",
		]
	}
}
